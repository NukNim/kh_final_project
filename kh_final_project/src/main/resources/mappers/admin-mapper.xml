<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="admin">

	<!-- 관리자 계정 리스트  -->
	<select id="accountmgr" resultType="pdto">
		select * from USER_TABLE
		WHERE USER_ROLE IN ('ROLE_A', 'ROLE_AM')
		ORDER BY USER_BIRTH DESC
	</select>  
	<!-- 관리자 계정 선택 -->
	<select id="selectUser" resultType="kh.com.job.admin.model.dto.AdUserDto">
	  	select USER_ID, USER_PW, USER_PHONE, USER_BIRTH, USER_EMAIL, USER_NAME, USER_ROLE from USER_TABLE
	  	WHERE USER_ID = #{userId}
	</select>
	
	<!-- 관리자 계정 정보 수정을 위한 암호체크 -->
	<select id="checkUser" resultType="kh.com.job.admin.model.dto.AdUserDto">
	  	select USER_PW from USER_TABLE
	  	WHERE USER_ID = #{userId}
	</select>
	
	
	<!-- 관리자 아이디 중복 체크 -->
	<select id="idCheck" resultType="_int">
	  	select count(USER_ID) from USER_TABLE
	  	WHERE USER_ID = #{userId}
	</select>
	
	<!-- 관리자 계정 생성 -->
	<insert id="insertAccount">
		INSERT INTO USER_TABLE (USER_ID, USER_PW, USER_PHONE, USER_BIRTH, USER_EMAIL, USER_NAME, USER_ROLE, TERMS_ACT, TERMS_DATE, TERMS_PERIOD)
		VALUES (#{userId}, #{userPw}, #{userPhone}, CURRENT_TIMESTAMP, #{userEmail}, #{userName}, #{userRole}, 'Y', CURRENT_TIMESTAMP, 60)
	</insert>
		
	<delete id="deleteAccount">
		DELETE FROM USER_TABLE WHERE USER_ID = #{userId}
	</delete>
	
	<!-- 직접 삭제 할지 계정 비활성화 시킬지 고민 -->
	<update id="deleteAccoint2">
		UPDATE USER_TABLE SET USER_ACT WHERE USER_ID = #{userId}
	</update>
	
	<!-- 관리자 계정 정보 수정 -->
	<update id="updateManager">
		UPDATE USER_TABLE
		<set>
			<if test= 'userPw != null and userPw != ""'>
			USER_PW = #{userPw},
			</if>
			<if test= 'userName != null and userName != ""'>
			USER_NAME = #{userName},
			</if>
			<if test= 'userPhone != null and userPhone != ""'>
			USER_PHONE = #{userPhone},
			</if>
			<if test= 'userEmail != null and userEmail != ""'>
			USER_EMAIL = #{userEmail},
			</if>
			<if test= 'userRole != null and userRole != ""'>
			USER_ROLE = #{userRole},
			</if>
		</set>
		WHERE USER_ID = #{userId}
	</update>
	
	<!-- 카테고리 1단계 리스트 -->
	<select id="cateFdeptList" resultType="kh.com.job.admin.model.dto.AdCategoryDto">
		SELECT * FROM JA_CATEGORY
		WHERE CATEGORY_DEPT = '1'
	</select>
	<!-- 카테고리 1단계 추가 -->
	<insert id="addFirstCategory">
		INSERT INTO JA_CATEGORY (CATEGORY_ID, CATEGORY_NAME, CATEGORY_DEPT, CATEGORY_TYPE) 
		VALUES (#{categoryId}, #{categoryName}, '1', #{categoryId}) 
	</insert>
	<!-- 카테고리 2단계 추가 -->
	<insert id="addMiddleCategory">
		INSERT INTO JA_CATEGORY (CATEGORY_ID, CATEGORY_NAME, CATEGORY_DEPT, CATEGORY_TYPE, REQ_CATEGORY_ID) 
		VALUES (#{categoryId}, #{categoryName}, '2', #{categoryType}, #{reqCategoryId}) 
	</insert>
	<!-- 카테고리 3단계 추가 -->
	<insert id="addLastCategory">
		INSERT INTO JA_CATEGORY (CATEGORY_ID, CATEGORY_NAME, CATEGORY_DEPT, CATEGORY_TYPE, REQ_CATEGORY_ID) 
		VALUES (#{categoryId}, #{categoryName}, '3', #{categoryType}, #{reqCategoryId}) 
	</insert>
	<!-- 카테고리 아이디 중복 확인 -->
	<select id="categoryCheck" resultType="_int">
		SELECT COUNT(CATEGORY_ID) FROM JA_CATEGORY
		WHERE CATEGORY_ID = #{categoryId} 
	</select>
	<!-- 카테고리 참조 확인 -->
	<select id="reqCheck" resultType="_int">
		SELECT COUNT(CATEGORY_ID) FROM JA_CATEGORY
		WHERE REQ_CATEGORY_ID = #{categoryId} 
	</select>
	<!-- 카테고리 삭제 -->
	<delete id="delFirstCategory">
		DELETE FROM JA_CATEGORY
		WHERE CATEGORY_ID = #{categoryId}
	</delete>
	
	<!-- 2단계 카테고리 리스트 -->
  	<select id="cateMdeptList" resultType="kh.com.job.admin.model.dto.AdCategoryDto">
		SELECT * FROM JA_CATEGORY
		WHERE REQ_CATEGORY_ID = #{categoryId}
		ORDER BY CATEGORY_ID DESC
	</select>
	
	<!-- 채용공고 미승인 리스트 -->
	<select id="recruitAdmission" resultType="kh.com.job.business.model.dto.BsRecruitDto">
		SELECT * FROM RECRUIT_REGIST
		WHERE RA_ADMISSION = 'N'
		AND CLOSE_DATE > SYSDATE
		ORDER BY RA_NUM DESC 
	</select>
	<!-- 채용공고 전체 리스트  -->
	<select id="recruitAllList" resultType="kh.com.job.business.model.dto.BsRecruitDto">
		SELECT * FROM RECRUIT_REGIST
		ORDER BY RA_NUM DESC 
	</select>
	
	<!-- 페이지 리스트 카운트 -->
	<select id="pageListCount" resultType="_int">
		SELECT COUNT(*) AS CNT 
		FROM RECRUIT_REGIST
		<trim prefix="where" prefixOverrides="AND|OR">
			<if test="search != null and search neq ''">
				RA_TITLE like '%'||#{search}||'%'
				or RA_CONTENT like '%'||#{search}||'%'
				or COMPANY_NAME like '%'||#{search}||'%'
			</if>
		</trim>
	</select>
	
	<!-- 페이지 리스트 -->
	<select id="pageList" resultType="kh.com.job.business.model.dto.BsRecruitDto">
		SELECT RA_NUM, RECRUIT_TYPE,USER_ID,COMPANY_NAME
		   , CAREER_TYPE, USER_EDUCATION, SALARY, REGIST_DATE, CLOSE_DATE, RA_TITLE
		   , RA_CONTENT, RA_EXTRA_DOCUMENT
		   , CAREER, HOLIDAY_TYPE, RA_ADMISSION
		FROM(
			SELECT ROWNUM AS NUM , A.*
			FROM (
				SELECT RA_NUM, RECRUIT_TYPE,USER_ID,COMPANY_NAME
				   , CAREER_TYPE, USER_EDUCATION, SALARY, REGIST_DATE, CLOSE_DATE, RA_TITLE
				   , RA_CONTENT, RA_EXTRA_DOCUMENT
				   , CAREER, HOLIDAY_TYPE, RA_ADMISSION
				FROM RECRUIT_REGIST
				<trim prefix="where" prefixOverrides="AND|OR">
					<if test="search != null and search neq ''">
						RA_TITLE like '%'||#{search}||'%'
						or RA_CONTENT like '%'||#{search}||'%'
						or COMPANY_NAME like '%'||#{search}||'%'
					</if>
				</trim>
				ORDER BY RA_NUM DESC
			) A
			)
		WHERE NUM BETWEEN #{startNum} AND #{endNum}
	</select>
	
	<!-- 게시글 상세 -->
	<select id="viewDetail" resultType="kh.com.job.business.model.dto.BsRecruitDetailDto">
		SELECT UT.USER_PHONE, UT.USER_EMAIL, UT.USER_NAME, UT.USER_PIC, UT.BS_MAIN_PHONE
	    , UT.ADDRESS_ROAD, UT.ADDRESS_JIBUN, UT.ADDRESS_DETAIL, UT.ADDRESS_POSTCODE
	    , RR.RA_NUM
	    , (SELECT JC.CATEGORY_NAME FROM JA_CATEGORY JC WHERE JC.CATEGORY_ID = RR.RECRUIT_TYPE) AS RECRUIT_TYPE
	    , RR.COMPANY_NAME, RR.SALARY
	    , RR.CONDITION_TYPE AS CONDITION_TYPE 
	    , (SELECT JC.CATEGORY_NAME FROM JA_CATEGORY JC WHERE JC.CATEGORY_ID = RR.USER_EDUCATION) AS USER_EDUCATION
	    , RR.REGIST_DATE, RR.CLOSE_DATE
	    , RR.RA_TITLE, RR.RA_CONTENT, RR.RA_EXTRA_DOCUMENT
	    , (SELECT JC.CATEGORY_NAME FROM JA_CATEGORY JC WHERE JC.CATEGORY_ID = RR.CAREER) AS CAREER
	    , (SELECT JC.CATEGORY_NAME FROM JA_CATEGORY JC WHERE JC.CATEGORY_ID = RR.HOLIDAY_TYPE) AS HOLIDAY_TYPE
	    , (SELECT JC.CATEGORY_NAME FROM JA_CATEGORY JC WHERE JC.CATEGORY_ID = RR.EMP_TYPE_CODE) AS EMP_TYPE_CODE
	    , RR.RA_ADMISSION
		FROM USER_TABLE UT
		JOIN RECRUIT_REGIST RR ON UT.USER_ID = RR.USER_ID
		WHERE RR.RA_NUM = #{raNum}
	</select>
	
	<update id="admissChange" parameterType="map">
		UPDATE RECRUIT_REGIST
		<set>
			<if test='raAdmission == "N"'>RA_ADMISSION = 'P'</if>
			<if test='raAdmission == "P" or raAdmission == "Y"'>RA_ADMISSION = 'N'</if>
		</set>	 
		WHERE RA_NUM = #{raNum}
	</update>
</mapper>
